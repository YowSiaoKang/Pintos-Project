       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yow Siao Kang siaokang@kaist.ac.kr
Abdulrahman Alabdulkarim genio@kaist.ac.kr

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct inode_disk {
  block_sector_t start; // Starting sector of the file
  off_t length; // Length of the file in bytes
  unsigned magic; // Magic number for validation
  uint32_t unused[125]; // Unused space for future use
};

Purpose: Represents the on-disk inode structure, storing metadata about files.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

The maximum size of a file is determined by the number of direct blocks an inode can address. Each block is 512 bytes, and the inode can address 125 blocks directly. Therefore, the maximum file size is 125 * 512 = 64,000 bytes.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

We use a file system-wide lock to ensure that only one process can modify the file size at a time. This prevents race conditions when extending a file.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

We use a combination of locks and condition variables to ensure that reads and writes are properly synchronized. When a write occurs, it signals any waiting readers to recheck the file state, ensuring they see the correct data.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

We use a read-write lock that prioritizes waiting writers over new readers. This ensures that writers get a chance to write even if there are many readers, and vice versa.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Our inode structure is not a multilevel index. We chose a simple direct block structure for simplicity and ease of implementation. The main advantage is simplicity, but it limits the maximum file size compared to a multilevel index.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct dir {
  struct inode *inode; // Inode associated with the directory
  off_t pos; // Current position in the directory
};

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

For absolute paths, traversal starts from the root directory. For relative paths, traversal starts from the current working directory. The path is split into components, and each component is looked up sequentially.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

We use directory-level locks to ensure that only one operation can modify the directory entries at a time, preventing races.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

Our implementation does not allow a directory to be removed if it is open or in use as a current working directory. We keep a reference count and prevent removal until the count drops to zero.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

We represent the current directory as a pointer to the directory's inode. This allows efficient access and manipulation of the current directory.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct cache_block {
  block_sector_t sector; // Sector number of the block
  bool dirty; // Indicates if the block has been modified
  bool valid; // Indicates if the block contains valid data
  uint8_t data[BLOCK_SECTOR_SIZE]; // Data of the block
};

Purpose: Represents a block in the buffer cache, storing its sector number, data, and status flags.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We use a Least Recently Used (LRU) algorithm to choose a cache block to evict. The least recently accessed block is selected for eviction.

>> C3: Describe your implementation of write-behind.

Write-behind is implemented by periodically flushing dirty blocks to disk in the background. This reduces the latency of write operations.

>> C4: Describe your implementation of read-ahead.

Read-ahead is implemented by prefetching the next block when a sequential read is detected. This improves the performance of sequential read operations.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

We use per-block locks to ensure that a block being read or written cannot be evicted by another process.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

We use a global cache lock during eviction to prevent other processes from accessing the block being evicted.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

A workload with frequent access to a small set of files benefits from buffer caching. Sequential read workloads benefit from read-ahead, and workloads with frequent small writes benefit from write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
